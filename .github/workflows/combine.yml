name: Combine and publish for linux debs

on:
  workflow_dispatch:

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Write permissions are required to upload the release asset.
permissions: write-all
    
jobs:  
  # -----------------------------------------
  #  Final "combine" job 
  # -----------------------------------------
  combine:
    # This job needs the build job to finish
    #needs: build
    runs-on: ubuntu-latest

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
            edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
            edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
            edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
            edamame_id: ${{ github.run_id }}
            network_scan: true
            auto_remediate: true
            checkout: true
            # We are using the token of the private repo to checkout the public repo and properly wait for access to the private repo
            token: ${{ secrets.DEV_GITHUB_TOKEN }}
            wait_for_api: true
            wait_for_https: true
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
            path: repo/pool/main

      - name: Reorganize .deb files by ARCH
        shell: bash
        run: |
            for ARCH in amd64 arm64 armhf i386; do
            # If artifacts for that arch were downloaded, they'll be under:
            #   repo/pool/main/deb-files-<ARCH>/
            if [ -d "repo/pool/main/deb-files-$ARCH" ]; then
                mkdir -p "repo/pool/main/$ARCH"
                mv repo/pool/main/deb-files-$ARCH/*.deb "repo/pool/main/$ARCH/" || true
                rm -rf "repo/pool/main/deb-files-$ARCH"
            fi
            done

      - name: Download existing metadata
        run: |
            mkdir -p repo/dists/stable/main
            for ARCH in amd64 arm64 armhf i386; do
            mkdir -p "repo/dists/stable/main/binary-$ARCH"
            # Download and decompress existing Packages.gz if it exists
            if aws s3 cp "s3://edamame/repo/dists/stable/main/binary-$ARCH/Packages.gz" \
                "repo/dists/stable/main/binary-$ARCH/Packages.gz" 2>/dev/null; then
                gunzip -f "repo/dists/stable/main/binary-$ARCH/Packages.gz"
            else
                touch "repo/dists/stable/main/binary-$ARCH/Packages"
            fi
            done

            # Download Release files
            aws s3 cp s3://edamame/repo/dists/stable/Release repo/dists/stable/Release 2>/dev/null || true
            aws s3 cp s3://edamame/repo/dists/stable/Release.gpg repo/dists/stable/Release.gpg 2>/dev/null || true
            aws s3 cp s3://edamame/repo/dists/stable/InRelease repo/dists/stable/InRelease 2>/dev/null || true

      - name: Combine .deb stanzas
        run: |
            for ARCH in amd64 arm64 armhf i386; do
            DEB_DIR="repo/pool/main/$ARCH"
            PACKAGES_FILE="repo/dists/stable/main/binary-$ARCH/Packages"
            
            # Only proceed if we have .deb files
            if [ -d "$DEB_DIR" ] && [ -n "$(ls "$DEB_DIR"/*.deb 2>/dev/null)" ]; then
                echo "Processing new packages for $ARCH..."
                
                # Verify .deb files are valid
                for deb in $DEB_DIR/*.deb; do
                dpkg-deb -I "$deb" || echo "Warning: Invalid .deb file: $deb"
                done

                # Create temporary files
                TEMP_NEW=$(mktemp)
                TEMP_MERGED=$(mktemp)
                
                # Generate stanzas for new packages
                # Change directory to where the .deb files live
                pushd "$DEB_DIR"
                ls -la
                dpkg-scanpackages --multiversion . > "$TEMP_NEW"
                cat "$TEMP_NEW"
                popd

                # Process existing and new packages to remove duplicates
                # Using awk to identify package stanzas and keep the latest version
                awk -v RS='\n\n' -v ORS='\n\n' '
                {
                    # Extract package name and version
                    pkg = version = ""
                    for (i=1; i<=NF; i++) {
                    if ($i ~ /^Package:/) pkg = substr($i, 10)
                    if ($i ~ /^Version:/) version = substr($i, 10)
                    }
                    if (pkg && version) {
                    key = pkg "-" version
                    if (!(key in seen) || $0 > seen[key]) {
                        seen[key] = $0
                    }
                    }
                }
                END {
                    for (key in seen) {
                    print seen[key]
                    }
                }' "$PACKAGES_FILE" "$TEMP_NEW" > "$TEMP_MERGED"
                
                # Replace the old Packages file with merged content
                mv "$TEMP_MERGED" "$PACKAGES_FILE"
                
                # Clean up temp files
                rm -f "$TEMP_NEW"
                
                # Compress the updated Packages file
                gzip -9f "$PACKAGES_FILE"
            fi
            done

      - name: Update Release file and sign
        env:
            GPG_PRIVATE_KEY_B64: ${{ secrets.GPG_PRIVATE_KEY_B64 }}
            GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
            # Import GPG key
            echo "$GPG_PRIVATE_KEY_B64" | base64 -d | gpg --batch --import

            # Create all required directories
            mkdir -p repo/dists/stable/main
            for ARCH in amd64 arm64 armhf i386; do
            mkdir -p "repo/dists/stable/main/binary-$ARCH"
            done

            # Export public key to both locations
            gpg --batch --yes --export --armor > repo/dists/stable/public.key
            mkdir -p repo/pool
            gpg --batch --yes --export --armor > repo/pool/public.key

            # Create or update Release file
            mkdir -p repo/dists/stable
            echo "Origin: EDAMAME" > repo/dists/stable/Release
            echo "Label: EDAMAME Repository" >> repo/dists/stable/Release
            echo "Suite: stable" >> repo/dists/stable/Release
            echo "Codename: stable" >> repo/dists/stable/Release
            echo "Architectures: amd64 arm64 armhf i386" >> repo/dists/stable/Release
            echo "Components: main" >> repo/dists/stable/Release
            echo "Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')" >> repo/dists/stable/Release

            # Add MD5Sum:
            echo "MD5Sum:" >> repo/dists/stable/Release
            for ARCH in amd64 arm64 armhf i386; do
            PKG_GZ="repo/dists/stable/main/binary-$ARCH/Packages.gz"
            PKG_TXT="repo/dists/stable/main/binary-$ARCH/Packages"

            if [ -f "$PKG_GZ" ]; then
                SIZE=$(stat -c%s "$PKG_GZ")
                MD5=$(md5sum "$PKG_GZ" | cut -d' ' -f1)
                echo " $MD5 $SIZE main/binary-$ARCH/Packages.gz" >> repo/dists/stable/Release
            fi
            if [ -f "$PKG_TXT" ]; then
                SIZE=$(stat -c%s "$PKG_TXT")
                MD5=$(md5sum "$PKG_TXT" | cut -d' ' -f1)
                echo " $MD5 $SIZE main/binary-$ARCH/Packages" >> repo/dists/stable/Release
            fi
            done

            # Add SHA256:
            echo "SHA256:" >> repo/dists/stable/Release
            for ARCH in amd64 arm64 armhf i386; do
            PKG_GZ="repo/dists/stable/main/binary-$ARCH/Packages.gz"
            PKG_TXT="repo/dists/stable/main/binary-$ARCH/Packages"

            if [ -f "$PKG_GZ" ]; then
                SIZE=$(stat -c%s "$PKG_GZ")
                SHA256=$(sha256sum "$PKG_GZ" | cut -d' ' -f1)
                echo " $SHA256 $SIZE main/binary-$ARCH/Packages.gz" >> repo/dists/stable/Release
            fi
            if [ -f "$PKG_TXT" ]; then
                SIZE=$(stat -c%s "$PKG_TXT")
                SHA256=$(sha256sum "$PKG_TXT" | cut -d' ' -f1)
                echo " $SHA256 $SIZE main/binary-$ARCH/Packages" >> repo/dists/stable/Release
            fi
            done

            # Sign Release file
            cd repo/dists/stable
            rm -f Release.gpg InRelease
            gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback -abs -o Release.gpg Release
            gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback -a -s --clearsign --output InRelease Release
        
      - name: Upload updated repository
        run: |
            # Ensure all directories exist before upload
            for ARCH in amd64 arm64 armhf i386; do
            mkdir -p "repo/pool/main/$ARCH"
            mkdir -p "repo/dists/stable/main/binary-$ARCH"
            done

            # Upload new .deb files
            for ARCH in amd64 arm64 armhf i386; do
            DEB_DIR="repo/pool/main/$ARCH"
            if [ -d "$DEB_DIR" ]; then
                aws s3 cp "$DEB_DIR/" "s3://edamame/repo/pool/main/$ARCH/" \
                --acl public-read --recursive
            fi
            done

            # Upload updated metadata (Packages*, Release, Release.gpg, etc.) + public key
            aws s3 cp repo/dists/ s3://edamame/repo/dists/ \
            --acl public-read --recursive

            # Create a more friendly URL for the public key
            aws s3 cp repo/dists/stable/public.key s3://edamame/repo/public.key \
            --acl public-read

      - name: Verify uploads
        run: |
            # Verify uploads
            curl -sI "https://edamame.s3.eu-west-1.amazonaws.com/repo/dists/stable/main/binary-$ARCH/Packages.gz" \
                | grep "HTTP/"
                | grep "HTTP/"
            done
            done