name: Build and publish for Linux Alpine

on:
  workflow_dispatch:

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Declare default permissions as read only.
permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      EDAMAME_APP_SENTRY: ${{ secrets.EDAMAME_APP_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          network_scan: true
          auto_remediate: true
          checkout: true

      - name: Setup Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: v3.15

      - name: Install dependencies with apk
        run: |
          apk add --no-cache \
            build-base \
            protobuf-dev \
            libpcap-dev \
            git \
            curl \
            openssl \
            openssl-dev \
            openssl-libs-static \
            pkgconf \
            eudev-dev \
            perl
        shell: alpine.sh --root {0}

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup --version
        shell: alpine.sh --root {0}

      - name: Configure Git Authentication to import private crates
        run: |
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"
          git config --global url."https://edamamedev:${{ secrets.DEV_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        shell: alpine.sh {0}

      - name: Set VERGEN_GIT_BRANCH to main
        run: echo "VERGEN_GIT_BRANCH=main" >> $GITHUB_ENV
        shell: alpine.sh {0}

      - name: Build application
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        run: |
          make linux_alpine_publish
        shell: alpine.sh --root {0}

      # Dev only (upload to dev folder)
      - name: Upload posture to AWS
        if: github.ref == 'refs/heads/dev'
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          aws s3 cp ./target/x86_64-unknown-linux-musl/release/edamame_posture s3://edamame-posture/dev/linux_alpine/${VERSION}/edamame_posture --acl public-read
      # Main only (upload to base folder)
      - name: Upload posture to AWS
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          aws s3 cp ./target/x86_64-unknown-linux-musl/release/edamame_posture s3://edamame-posture/linux_alpine/${VERSION}/edamame_posture --acl public-read
          aws s3 cp ./target/x86_64-unknown-linux-musl/release/edamame_posture s3://edamame-posture/linux_alpine/latest/edamame_posture --acl public-read
      - name: Dump EDAMAME Posture sessions
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          dump_sessions_log: true
