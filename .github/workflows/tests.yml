name: Cross-platform tests

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'
      - 'main'

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Declare default permissions as read only.
permissions: read-all

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Regular OS tests
          - os: ubuntu-latest
            arch: x86_64
            container: false
          - os: macos-latest
            arch: x86_64
            container: false
          - os: windows-latest
            arch: x86_64
            container: false
          # Linux aarch64 tests using QEMU
          - os: ubuntu-latest
            arch: aarch64
            container: false
          # Container-based tests for older Ubuntu versions
          - os: ubuntu-latest
            arch: x86_64
            container: true
            container_image: ubuntu:20.04
            container_name: ubuntu-20.04
          - os: ubuntu-latest
            arch: x86_64
            container: true
            container_image: ubuntu:18.04
            container_name: ubuntu-18.04
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container && matrix.container_image || null }}

    env:
      EDAMAME_APP_SENTRY: ${{ secrets.EDAMAME_APP_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_CORE_TARGET: ${{ secrets.EDAMAME_CORE_TARGET }}
      EDAMAME_CORE_SERVER: ${{ secrets.EDAMAME_CORE_SERVER }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      EDAMAME_SERVER_PEM: ${{ secrets.EDAMAME_SERVER_PEM }}
      EDAMAME_SERVER_KEY: ${{ secrets.EDAMAME_SERVER_KEY }}
      EDAMAME_CLIENT_CA_PEM: ${{ secrets.EDAMAME_CLIENT_CA_PEM }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      # Glibc static linking for compatibility with older distros (for Linux only)
      RUSTFLAGS: ${{ contains(matrix.os, 'ubuntu') && '-C target-feature=+crt-static' || '' }}
      # Debug mode
      EDAMAME_LOG_LEVEL: debug
      
    steps:
      # Set up QEMU for aarch64 emulation
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Needed when we are running in a container
      - name: Setup permissions for git and install missing packages
        if: matrix.container
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y git
          # Without that git pull in edamame_posture_action fails as well as other actions
          git config --global --add safe.directory '*'

      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          checkout: true
          # We are using the token of the the private repo to checkout the public repo and properly wait for access to the private repo
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          wait_for_api: true
          wait_for_https: true

      - name: Configure Git Authentication to import private crates
        run: |
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"
          git config --global url."https://edamamedev:${{ secrets.DEV_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Install additional packages w/ apt for Linux containers
        if: matrix.container
        run: |
          export DEBIAN_FRONTEND=noninteractive
          # Install build dependencies
          apt-get update
          apt-get install -y protobuf-compiler
          apt-get install -y libpcap-dev
          # For downloading and other tools
          apt-get install -y curl wget sudo
          
          # For cross-compilation if needed
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            apt-get install -y binutils-aarch64-linux-gnu
          fi

      - name: Install additional packages w/ apt for Linux
        if: contains(matrix.os, 'ubuntu') && !matrix.container
        run: |
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          # For packet capture
          sudo apt-get install -y libpcap-dev
          # For cross-compilation tools
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt-get install -y binutils-aarch64-linux-gnu
          fi

      # Install Zig for Linux x86_64
      - name: Install Zig for x86_64
        if: contains(matrix.os, 'ubuntu') && matrix.arch == 'x86_64'
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.11.0

      # Manual Zig installation for containers
      - name: Install Zig in container
        if: matrix.container
        run: |
          cd /tmp
          wget https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz
          tar -xf zig-linux-x86_64-0.11.0.tar.xz
          mv zig-linux-x86_64-0.11.0 /usr/local/zig
          echo 'export PATH=$PATH:/usr/local/zig' >> ~/.bashrc
          echo 'export PATH=$PATH:/usr/local/zig' >> $GITHUB_ENV
          export PATH=$PATH:/usr/local/zig

      # Install Rust toolchain for x86_64
      - name: Install Rust toolchain for x86_64
        if: contains(matrix.os, 'ubuntu') && matrix.arch == 'x86_64'
        uses: dtolnay/rust-toolchain@stable

      # Install Rust toolchain for aarch64
      - name: Install Rust toolchain for aarch64
        if: matrix.arch == 'aarch64'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      # Install Rust in container
      - name: Install Rust in container
        if: matrix.container
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source "$HOME/.cargo/env"

      # Install cargo-zigbuild for Linux
      - name: Install cargo-zigbuild
        if: contains(matrix.os, 'ubuntu') && !matrix.container
        run: cargo install cargo-zigbuild

      # Install cargo-zigbuild in container
      - name: Install cargo-zigbuild in container
        if: matrix.container
        run: |
          source "$HOME/.cargo/env"
          cargo install cargo-zigbuild

      - name: Install additional packages w/ Homebrew for macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf
          brew install wget

      - name: Setup .NET 8.0 for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Setup MS Store CLI for Windows
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msstore-cli@v1

      - name: Install additional packages w/ Chocolatey for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc wget
          dotnet tool install --global AzureSignTool
   
      - name: Set environment variables
        shell: bash
        run: |
            # Set BINARY_PATH for scripts (points to the built release binary)
            echo "BINARY_PATH=./target/release/edamame_posture${{ matrix.os == 'windows-latest' && '.exe' || '' }}" >> $GITHUB_ENV
            # Keep environment variables when running sudo
            echo "SUDO_CMD=${{ matrix.os != 'windows-latest' && 'sudo -E' || '' }}" >> $GITHUB_ENV
            # Set RUNNER_OS explicitly for scripts (more reliable than uname inside scripts)
            echo "RUNNER_OS=${{ matrix.os }}" >> $GITHUB_ENV
            # Set EDAMAME_LOG_LEVEL for scripts
            echo "EDAMAME_LOG_LEVEL=debug" >> $GITHUB_ENV
            # Set EDAMAME_ID for connected tests script
            echo "EDAMAME_ID=${{ github.run_id }}" >> $GITHUB_ENV
            # Set KEYCHAIN_PATH for macOS signing
            echo "KEYCHAIN_PATH=/tmp/app-signing.keychain-db" >> $GITHUB_ENV

      - name: Build application
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "aarch64" ]]; then
            # Build for aarch64
            cargo zigbuild --release --target aarch64-unknown-linux-gnu
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Build using zigbuild for Linux x86_64
            source "$HOME/.cargo/env" || true
            cargo zigbuild --release
          else
            # Regular build for macOS and Windows
            cargo build --release
          fi
  
      - name: Signing for macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Create certificate files from secrets base64
          echo ${{ secrets.APPLE_DEVELOPMENT_CER }} | base64 --decode > certificate_dev.cer
          echo ${{ secrets.APPLE_DEVELOPMENT_KEY }} | base64 --decode > certificate_dev.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CER }} | base64 --decode > certificate_installer.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_KEY }} | base64 --decode > certificate_installer.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CER }} | base64 --decode > certificate_application.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_KEY }} | base64 --decode > certificate_application.key
          
          # Create p12 file
          openssl pkcs12 -export -name zup -in certificate_dev.cer -inkey certificate_dev.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_dev.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_installer.cer -inkey certificate_installer.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_installer.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_application.cer -inkey certificate_application.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_application.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        
          # Configure Keychain
          security create-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          # Import certificates on Keychain
          security import certificate_dev.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_installer.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Verify Keychain
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Sign + hardened runtime
          ./macos/sign.sh $BINARY_PATH

      - name: Signing for Windows
        if: matrix.os == 'windows-latest'
        # We can't use bash here, as the AzureSignTool is a .NET tool
        run: AzureSignTool sign -kvt ${{ secrets.AZURE_SIGN_TENANT_ID }} -kvu ${{ secrets.AZURE_SIGN_KEY_VAULT_URI }} -kvi ${{ secrets.AZURE_SIGN_CLIENT_ID }} -kvs ${{ secrets.AZURE_SIGN_CLIENT_SECRET }} -kvc ${{ secrets.AZURE_SIGN_CERT_NAME }} -tr http://timestamp.digicert.com -v ./target/release/edamame_posture.exe

      - name: Pcap DLLs for Windows
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          # For cargo tests
          mkdir -p ./target/debug
          wget https://github.com/edamametechnologies/edamame_posture_cli/raw/refs/heads/main/windows/Packet.dll -O ./target/debug/Packet.dll
          wget https://github.com/edamametechnologies/edamame_posture_cli/raw/refs/heads/main/windows/wpcap.dll -O ./target/debug/wpcap.dll
          # For Standalone and Integration tests
          mkdir -p ./target/release
          cp -f ./target/debug/Packet.dll ./target/release/
          cp -f ./target/debug/wpcap.dll ./target/release/
          # For Integration tests
          mkdir -p ./tests_temp
          cp -f ./target/debug/Packet.dll ./tests_temp/
          cp -f ./target/debug/wpcap.dll ./tests_temp/

      - name: Run Basic Cargo Tests
        id: cargo_tests
        shell: bash
        run: ./tests/basic_cargo_test.sh
        continue-on-error: true

      - name: Run Standalone Commands Test
        id: standalone_tests
        shell: bash
        run: ./tests/standalone_commands_test.sh
        continue-on-error: true

      - name: Run Integration Tests
        id: integration_tests
        shell: bash
        env:
          EDAMAME_USER: ${{ vars.EDAMAME_POSTURE_USER }}
          EDAMAME_DOMAIN: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          EDAMAME_PIN: ${{ secrets.EDAMAME_POSTURE_PIN }}
        run: ./tests/integration_test.sh
        continue-on-error: true

      - name: Slack alerts
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Test Results for ${{ github.repository }} (${{ matrix.container_name || matrix.os }}-${{ matrix.arch }})*:
            - Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Dump the logs
        shell: bash
        if: always() # Dump logs regardless of outcome
        run: |
          echo "--- Dumping Logs --- "
          find "$HOME/" -name "edamame_cli_*.*" -exec echo "--- {} ---" \; -exec cat {} \; || echo "No logs found in HOME"
          echo "--- Log Dump Complete ---"

      - name: Fail job if tests failed
        shell: bash
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        run: |
          echo "Forcing job to fail because tests did not succeed."
          exit 1
