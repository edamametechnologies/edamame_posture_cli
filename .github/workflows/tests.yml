name: Cross-platform tests

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'
      - 'main'

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Declare default permissions as read only.
permissions: read-all

jobs:
  test-native:
    # We need to wait a long time for aarch64 due to the use of qemu
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        include:
          # Regular OS tests
          - os: ubuntu
            runs-on: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos
            # We can't use macos-latest here because of permissions issues in the network tests
            runs-on: macos-14
            arch:
            target:
          - os: windows
            runs-on: windows-latest
            arch:
            target: x86_64-pc-windows-msvc
          - os: ubuntu
            runs-on: ubuntu-24.04-arm
            arch: aarch64
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.runs-on }}

    env:
      EDAMAME_APP_SENTRY: ${{ secrets.EDAMAME_APP_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_CORE_TARGET: ${{ secrets.EDAMAME_CORE_TARGET }}
      EDAMAME_CORE_SERVER: ${{ secrets.EDAMAME_CORE_SERVER }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      EDAMAME_SERVER_PEM: ${{ secrets.EDAMAME_SERVER_PEM }}
      EDAMAME_SERVER_KEY: ${{ secrets.EDAMAME_SERVER_KEY }}
      EDAMAME_CLIENT_CA_PEM: ${{ secrets.EDAMAME_CLIENT_CA_PEM }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      # Debug mode
      EDAMAME_LOG_LEVEL: debug

    steps:

      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-native-${{ matrix.os }}-${{ matrix.arch }} # Unique ID
          checkout: true
          # We are using the token of the the private repo to checkout the public repo and properly wait for access to the private repo
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          wait_for_api: true
          wait_for_https: true

      - name: Configure Git Authentication to import private crates
        run: |
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"
          git config --global url."https://edamamedev:${{ secrets.DEV_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Install additional packages w/ apt for Linux
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libpcap-dev
          # For cross-compilation tools
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt-get install -y binutils-aarch64-linux-gnu
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install additional packages w/ Homebrew for macOS
        if: matrix.os == 'macos'
        run: |
          brew install protobuf
          brew install wget

      - name: Setup .NET 8.0 for Windows
        if: matrix.os == 'windows'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install additional packages w/ Chocolatey for Windows
        if: matrix.os == 'windows'
        run: |
          choco install protoc wget
          dotnet tool install --global AzureSignTool
   
      - name: Set environment variables
        shell: bash
        run: |
            # Set BINARY_PATH for scripts (points to the built release binary)
            echo "BINARY_PATH=./target/release/edamame_posture${{ matrix.os == 'windows' && '.exe' || '' }}" >> $GITHUB_ENV
            # Set KEYCHAIN_PATH for scripts (path to the keychain)
            echo "KEYCHAIN_PATH=/tmp/app-signing.keychain-db" >> $GITHUB_ENV

      - name: Build application
        shell: bash
        run: |
          cargo build --release

      - name: Signing for macOS
        if: matrix.os == 'macos'
        shell: bash
        run: |
          # Create certificate files from secrets base64
          echo ${{ secrets.APPLE_DEVELOPMENT_CER }} | base64 --decode > certificate_dev.cer
          echo ${{ secrets.APPLE_DEVELOPMENT_KEY }} | base64 --decode > certificate_dev.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CER }} | base64 --decode > certificate_installer.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_KEY }} | base64 --decode > certificate_installer.key
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CER }} | base64 --decode > certificate_application.cer
          echo ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_KEY }} | base64 --decode > certificate_application.key
          
          # Create p12 file
          openssl pkcs12 -export -name zup -in certificate_dev.cer -inkey certificate_dev.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_dev.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_installer.cer -inkey certificate_installer.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_installer.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          openssl pkcs12 -export -name zup -in certificate_application.cer -inkey certificate_application.key -passin pass:${{ secrets.APPLE_P12_PASSWORD }} -out certificate_application.p12 -passout pass:${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        
          # Configure Keychain
          security create-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.MACOS_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          # Import certificates on Keychain
          security import certificate_dev.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_installer.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Verify Keychain
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Sign + hardened runtime
          ./macos/sign.sh $BINARY_PATH

      - name: Signing for Windows
        if: matrix.os == 'windows'
        # We can't use bash here, as the AzureSignTool is a .NET tool
        run: AzureSignTool sign -kvt ${{ secrets.AZURE_SIGN_TENANT_ID }} -kvu ${{ secrets.AZURE_SIGN_KEY_VAULT_URI }} -kvi ${{ secrets.AZURE_SIGN_CLIENT_ID }} -kvs ${{ secrets.AZURE_SIGN_CLIENT_SECRET }} -kvc ${{ secrets.AZURE_SIGN_CERT_NAME }} -tr http://timestamp.digicert.com -v ./target/release/edamame_posture.exe

      - name: Run Basic Cargo Tests
        id: cargo_tests
        shell: bash
        run: ./tests/basic_cargo_test.sh
        continue-on-error: true

      - name: Run Standalone Commands Test
        id: standalone_tests
        shell: bash
        run: ./tests/standalone_commands_test.sh
        continue-on-error: true

      - name: Run Integration Tests
        id: integration_tests
        shell: bash
        env:
          EDAMAME_USER: ${{ vars.EDAMAME_POSTURE_USER }}
          EDAMAME_DOMAIN: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          EDAMAME_PIN: ${{ secrets.EDAMAME_POSTURE_PIN }}
        run: ./tests/integration_test.sh
        continue-on-error: true

      - name: Slack alerts
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Native Test Results for ${{ github.repository }} (${{ matrix.os }}-${{ matrix.arch }})*:
            - Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Dump the logs
        shell: bash
        if: always()
        run: |
          echo "--- Dumping Native Logs (${{ matrix.os }}-${{ matrix.arch }}) --- "
          find . -name "edamame_*.2*-*-*" -exec echo "--- {} ---" \; -exec cat {} \; || echo "No logs found in default directory"
          echo "--- Native Log Dump Complete ---"

      - name: Fail job if tests failed
        shell: bash
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        run: |
          echo "## Test Results Summary (Native - ${{ matrix.os }}-${{ matrix.arch }})"
          echo "- Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "Forcing native job to fail because tests did not succeed."
          exit 1

  test-container:
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # Container-based tests for older Ubuntu versions
          - os: ubuntu # Containers always run on ubuntu-latest host
            runs-on: ubuntu-latest
            arch: x86_64
            container_image: ubuntu:20.04
            container_name: ubuntu-20.04
          - os: ubuntu # Containers always run on ubuntu-latest host
            runs-on: ubuntu-latest
            arch: x86_64
            container_image: ubuntu:18.04
            container_name: ubuntu-18.04
    runs-on: ${{ matrix.runs-on }}
    container:
      image: ${{ matrix.container_image }}
      # Needed for integration tests (pcap)
      options: --cap-add=NET_ADMIN --cap-add=NET_RAW
    env:
      CARGO_TERM_COLOR: always
      EDAMAME_APP_SENTRY: ${{ secrets.EDAMAME_APP_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_SERVER: ${{ secrets.EDAMAME_SERVER }}
      EDAMAME_CORE_TARGET: ${{ secrets.EDAMAME_CORE_TARGET }}
      EDAMAME_CORE_SERVER: ${{ secrets.EDAMAME_CORE_SERVER }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      EDAMAME_SERVER_PEM: ${{ secrets.EDAMAME_SERVER_PEM }}
      EDAMAME_SERVER_KEY: ${{ secrets.EDAMAME_SERVER_KEY }}
      EDAMAME_CLIENT_CA_PEM: ${{ secrets.EDAMAME_CLIENT_CA_PEM }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      # Debug mode
      EDAMAME_LOG_LEVEL: debug

    steps:
      # Needed when we are running in a container
      - name: Setup permissions for git and install missing packages
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y git curl
          git config --global --add safe.directory '*'

      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-container-${{ matrix.container_name }} # Unique ID
          # Don't checkout the repo, as we will do that in the next step
          checkout: false
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          wait_for_api: true
          wait_for_https: true

      - name: Configure Git Authentication to import private crates
        run: |
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"
          git config --global url."https://edamamedev:${{ secrets.DEV_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      # Manual checkout for containers (actions/checkout@v4 requires node20 which is not supported on older Ubuntu containers)
      - name: Manual checkout for containers
        shell: bash
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout "${{ github.head_ref || github.ref_name }}"

      - name: Install additional packages w/ apt for Linux
        run: |
          apt-get update
          # psmisc is needed for killall
          apt-get install -y protobuf-compiler libpcap-dev psmisc

      # Install Rust in container
      - name: Install Rust in container
        shell: bash
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          # Add rust to path for subsequent steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build application
        shell: bash
        run: |
          # Ensure cargo is in path
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo build --release

      - name: Run Basic Cargo Tests
        id: cargo_tests
        shell: bash
        run: ./tests/basic_cargo_test.sh
        continue-on-error: true
        env:
          SUDO_CMD: "" # No sudo needed in container

      - name: Run Standalone Commands Test
        id: standalone_tests
        shell: bash
        run: ./tests/standalone_commands_test.sh
        continue-on-error: true

      - name: Run Integration Tests
        id: integration_tests
        shell: bash
        env:
          EDAMAME_USER: ${{ vars.EDAMAME_POSTURE_USER }}
          EDAMAME_DOMAIN: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          EDAMAME_PIN: ${{ secrets.EDAMAME_POSTURE_PIN }}
          SUDO_CMD: "" # No sudo needed in container
        run: ./tests/integration_test.sh
        continue-on-error: true

      - name: Dump the logs
        shell: bash
        if: always()
        run: |
          echo "--- Dumping Container Logs (${{ matrix.container_name }}) --- "
          find . -name "edamame_*.2*-*-*" -exec echo "--- {} ---" \; -exec cat {} \; || echo "No logs found in default directory"
          echo "--- Container Log Dump Complete ---"

      - name: Slack alerts
        # Won't work on 18.04 because of glibc version
        if: (steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure') && !contains(matrix.container_name, '18.04')
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Container Test Results for ${{ github.repository }} (${{ matrix.container_name }})*:
            - Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Fail job if tests failed
        shell: bash
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        run: |
          echo "## Test Results Summary (Container - ${{ matrix.container_name }})"
          echo "- Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "Forcing container job to fail because tests did not succeed."
          exit 1

  test-alpine:
     # We need to wait a long time for musl aarch64 due to the use of qemu
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runs-on: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-musl
          - os: ubuntu
            # We can't use ubuntu-24.04-arm here because of setup-alpine incompatibility
            runs-on: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-musl
    runs-on: ${{ matrix.runs-on }}

    env:
      CARGO_TERM_COLOR: always
      EDAMAME_APP_SENTRY: ${{ secrets.EDAMAME_APP_SENTRY }}
      PWNED_API_KEY: ${{ secrets.PWNED_API_KEY }}
      EDAMAME_TARGET: ${{ secrets.EDAMAME_TARGET }}
      EDAMAME_CORE_TARGET: ${{ secrets.EDAMAME_CORE_TARGET }}
      EDAMAME_CORE_SERVER: ${{ secrets.EDAMAME_CORE_SERVER }}
      EDAMAME_CA_PEM: ${{ secrets.EDAMAME_CA_PEM }}
      EDAMAME_CLIENT_PEM: ${{ secrets.EDAMAME_CLIENT_PEM }}
      EDAMAME_CLIENT_KEY: ${{ secrets.EDAMAME_CLIENT_KEY }}
      EDAMAME_SERVER_PEM: ${{ secrets.EDAMAME_SERVER_PEM }}
      EDAMAME_SERVER_KEY: ${{ secrets.EDAMAME_SERVER_KEY }}
      EDAMAME_CLIENT_CA_PEM: ${{ secrets.EDAMAME_CLIENT_CA_PEM }}
      LAMBDA_SIGNATURE: ${{ secrets.LAMBDA_SIGNATURE }}
      MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      # Debug mode
      EDAMAME_LOG_LEVEL: debug

    steps:

      # Setup Alpine Linux
      - name: Setup Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.arch }}
          branch: v3.15

      # Install dependencies with apk in Alpine VM
      - name: Install dependencies with apk
        run: |
          apk add --no-cache \
            build-base \
            protobuf-dev \
            libpcap-dev \
            git \
            curl \
            pkgconf \
            eudev-dev \
            perl \
            bash
        shell: alpine.sh --root {0}

      # We need to setup edamame_posture outside of the Alpine VM as otherwise IP address detection will fail and access will not be granted
      #- name: Setup EDAMAME Posture
      #  run: |
      #    # Install bash and sudo first
      #    apk add --no-cache bash sudo
      #    # Download edamame_posture for MUSL
      #    wget https://raw.githubusercontent.com/edamametechnologies/edamame_posture_cli/refs/heads/main/linux/edamame_setup.sh -O ./edamame_setup.sh
      #    chmod +x ./edamame_setup.sh
      #    # Use bash to run the script
      #   bash ./edamame_setup.sh ${{ vars.EDAMAME_POSTURE_USER }} ${{ vars.EDAMAME_POSTURE_DOMAIN }} ${{ secrets.EDAMAME_POSTURE_PIN }} ${{ github.run_id }}-alpine-${{ matrix.arch }}
      #  shell: alpine.sh --root {0}

      # Setup EDAMAME Posture in host environment
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-alpine-${{ matrix.arch }} # Unique ID
          # Don't checkout the repo, as we will do that in the next step
          checkout: false
          # We are using the token of the the private repo to checkout the public repo and properly wait for access to the private repo
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          wait_for_api: true
          wait_for_https: true

      # Configure Git Authentication to import private crates in Alpine VM
      - name: Configure Git Authentication to import private crates
        run: |
          git config --global user.email "dev@edamame.tech"
          git config --global user.name "EDAMAME Dev"
          git config --global url."https://edamamedev:${{ secrets.DEV_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        shell: alpine.sh {0}

      # Manual checkout in Alpine VM
      - name: Manual checkout
        run: |
          mkdir temp
          cd temp
          git clone https://github.com/${{ github.repository }}.git .
          git checkout "${{ github.head_ref || github.ref_name }}"
        shell: alpine.sh {0}

      # Install Rust
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup target add ${{ matrix.target }}
        shell: alpine.sh {0}

      # Build application in Alpine VM
      - name: Build application
        run: |
          source $HOME/.cargo/env
          cd temp && cargo build --release --target ${{ matrix.target }}
        shell: alpine.sh --root {0}
        env:
          VERGEN_GIT_BRANCH: ${{ github.ref_name }}

      # Must be in the Alpine VM
      - name: Run Basic Cargo Tests
        id: cargo_tests
        run: cd temp && ./tests/basic_cargo_test.sh
        shell: alpine.sh --root {0}
        continue-on-error: true
        env:
          VERGEN_GIT_BRANCH: ${{ github.ref_name }}

      # Must be in the Alpine VM
      - name: Run Standalone Commands Test
        id: standalone_tests
        run: cd temp && ./tests/standalone_commands_test.sh
        shell: alpine.sh --root {0}
        continue-on-error: true

      # Must be in the Alpine VM
      - name: Run Integration Tests
        id: integration_tests
        env:
          EDAMAME_USER: ${{ vars.EDAMAME_POSTURE_USER }}
          EDAMAME_DOMAIN: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          EDAMAME_PIN: ${{ secrets.EDAMAME_POSTURE_PIN }}
        run: cd temp && ./tests/integration_test.sh
        shell: alpine.sh --root {0}
        continue-on-error: true

      # Must be in the host environment
      - name: Slack alerts
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Alpine Test Results for ${{ github.repository }} (${{ matrix.arch }})*:
            - Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            - Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # Must be in the Alpine VM
      - name: Dump the logs
        if: always()
        run: |
          echo "--- Dumping Alpine Logs (${{ matrix.arch }}) --- "
          find . -name "edamame_*.2*-*-*" -exec echo "--- {} ---" \; -exec cat {} \; || echo "No logs found in default directory"
          echo "--- Alpine Log Dump Complete ---"
        shell: alpine.sh --root {0}

      # Must be in the host environment
      - name: Fail job if tests failed
        if: steps.cargo_tests.outcome == 'failure' || steps.standalone_tests.outcome == 'failure' || steps.integration_tests.outcome == 'failure'
        run: |
          echo "## Test Results Summary (Alpine - ${{ matrix.arch }})"
          echo "- Cargo Tests: ${{ steps.cargo_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Standalone Tests: ${{ steps.standalone_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo "- Integration Tests: ${{ steps.integration_tests.outcome != 'failure' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "Forcing alpine job to fail because tests did not succeed."
          exit 1
